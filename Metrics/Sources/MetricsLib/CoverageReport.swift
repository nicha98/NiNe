/*
 * Copyright 2019 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Foundation

/// Represents a code coverage report generated by XCov (maps to the JSON report one to one).
public struct CoverageReport: Decodable {
  public var coveredLines: Int
  public var lineCoverage: Double
  public var errors: [Error]
  public var targets: [Target]
  public var executableLines: Int

  public init(targets: [Target], coverage: Double) {
    self.coveredLines = 0
    self.lineCoverage = coverage
    self.errors = []
    self.targets = targets
    self.executableLines = 0
  }

  /// Creates a CoverageReport from a JSON file generated by XCov.
  public static func load(path: String) throws -> CoverageReport {
    let data = try Data(contentsOf: NSURL(fileURLWithPath: path) as URL)
    let decoder = JSONDecoder()
    return try decoder.decode(CoverageReport.self, from: data)
  }
}

public struct Error: Decodable {
  public var code: Int
  public var localizedDescription: String
  public var domain: String

  public init(code: Int, localizedDescription: String, domain: String) {
    self.code = code
    self.localizedDescription = localizedDescription
    self.domain = domain
  }
}

/// An XCov target.
public struct Target: Decodable {
  public var coveredLines: Int
  public var lineCoverage: Double
  public var files: [File]
  public var name: String
  public var executableLines: Int
  public var buildProductPath: String

  public init(name: String, coverage: Double) {
    self.coveredLines = 0
    self.lineCoverage = coverage
    self.files = []
    self.name = name
    self.executableLines = 0
    self.buildProductPath = ""
  }
}

/// An XCov file.
public struct File: Decodable {
  public var coveredLines: Int
  public var lineCoverage: Double
  public var path: String
  public var functions: [Function]
  public var name: String
  public var executableLines: Int
}

/// An XCov function.
public struct Function: Decodable {
  public var coveredLines: Int
  public var lineCoverage: Double
  public var lineNumber: Int
  public var executionCount: Int
  public var name: String
  public var executableLines: Int
}
