diff --git a/ZipBuilder/Sources/ZipBuilder/ShellUtils.swift b/ZipBuilder/Sources/ShellUtils/ShellUtils.swift
similarity index 92%
rename from ZipBuilder/Sources/ZipBuilder/ShellUtils.swift
rename to ZipBuilder/Sources/ShellUtils/ShellUtils.swift
index 59b6a2561..d6b76afae 100644
--- a/ZipBuilder/Sources/ZipBuilder/ShellUtils.swift
+++ b/ZipBuilder/Sources/ShellUtils/ShellUtils.swift
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Google
+ * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -19,11 +19,11 @@ import Foundation
 /// Convenience function for calling functions in the Shell. This should be used sparingly and only
 /// when interacting with tools that can't be accessed directly in Swift (i.e. CocoaPods,
 /// xcodebuild, etc). Intentionally empty, this enum is used as a namespace.
-internal enum Shell {}
+public enum Shell {}

 extension Shell {
   /// A type to represent the result of running a shell command.
-  enum Result {
+  public enum Result {
     /// The command was successfully run (based on the output code), with the output string as the
     /// associated value.
     case success(output: String)
@@ -42,12 +42,12 @@ extension Shell {
   ///   - outputToConsole: A flag if the command output should be written to the console as well.
   ///   - workingDir: An optional working directory to run the shell command in.
   /// - Returns: A Result containing output information from the command.
-  static func executeCommandFromScript(_ command: String,
-                                       outputToConsole: Bool = true,
-                                       workingDir: URL? = nil) -> Result {
+  public static func executeCommandFromScript(_ command: String,
+                                              outputToConsole: Bool = true,
+                                              workingDir: URL? = nil) -> Result {
     let scriptPath: URL
     do {
-      let tempScriptsDir = FileManager.default.temporaryDirectory(withName: "temp_scripts")
+      let tempScriptsDir = URL(fileURLWithPath: NSTemporaryDirectory())
       try FileManager.default.createDirectory(at: tempScriptsDir,
                                               withIntermediateDirectories: true,
                                               attributes: nil)
@@ -63,9 +63,6 @@ extension Shell {
       \(command)
       """
       try contents.write(to: scriptPath, atomically: true, encoding: .utf8)
-    } catch let FileManager.FileError.failedToCreateDirectory(path, error) {
-      fatalError("Could not execute shell command: \(command) - could not create temporary " +
-        "script directory at \(path). \(error)")
     } catch {
       fatalError("Could not execute shell command: \(command) - unexpected error. \(error)")
     }
